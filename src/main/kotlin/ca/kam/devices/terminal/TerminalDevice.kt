package ca.kam.devices.terminal

import ca.kam.vmhardwarelibraries.DeviceAsks
import ca.kam.vmhardwarelibraries.TechDevice
import ca.kam.vmhardwarelibraries.memory.MemoryDevice
import java.lang.Integer.min
import java.lang.Integer.toHexString

@OptIn(ExperimentalUnsignedTypes::class)
class TerminalDevice: TechDevice {
    lateinit var mBuffer: MemoryDevice

    override val isForked: Boolean = false

    var cRead: String? = null

    override fun deviceInfo(): DeviceAsks = DeviceAsks(
        0x7fu,
        CODE.size.toUShort(),
        50u,
        arrayOf(0x0003u,0x0048u)
    )

    override fun getCode(): UByteArray = CODE.copyOf()

    override fun lockBuffer(memory: MemoryDevice) {
        mBuffer = memory
    }

    override fun signal() {
//        println("Term Buffer")
//        for (i in 0 until 50) {
//            if (i % 10 == 0) {
//                print("\n")
//            }
//            print( toHexString(mBuffer.bit8[i.toUShort()].toInt()) )
//            print(" ")
//        }

        val command = mBuffer.bit16[0u]
        if (command == 0x00f0.toUShort()) {
            activateRead()
            return
        }

        var o = ""
        var c = ' '
        var stop = 0
        for (i in 0 until 50) {
            c = mBuffer.bit8[i.toUShort()].toInt().toChar()
            if (c == 0.toChar()) {
                stop = i
                break
            }
            o += c
        }
        print(o)
        mBuffer.bit8[stop.toUShort()] = 0xffu
    }

    fun activateRead() {
        if (cRead == null) {
            cRead = readln()
        }
        val length = min(cRead!!.length, 49)
        val sByte = length.or(if (length < cRead!!.length) 0x80 else 0)
        mBuffer.bit8[0u] = sByte.toUByte()

        for (i in 1 until (length+1)) {
            mBuffer.bit8[i.toUShort()] = cRead!![i-1].code.toUByte()
        }
        cRead = if (length < cRead!!.length) {
            cRead!!.substring(length)
        } else {
            null
        }
    }



    companion object {
        val CODE = ubyteArrayOf(
            0x00u, 0x00u, 0x00u, 0x10u, 0x00u, 0x00u, 0x01u, 0x3eu,
            0x03u, 0x00u, 0x47u, 0x10u, 0x00u, 0x00u, 0x09u, 0x13u,
            0x00u, 0x01u, 0x08u, 0xfeu, 0x01u, 0x76u, 0x02u, 0x07u,
            0x77u, 0x07u, 0x08u, 0xfeu, 0x00u, 0x35u, 0x08u, 0x35u,
            0x09u, 0x36u, 0x03u, 0x35u, 0x02u, 0x10u, 0x00u, 0x00u,
            0x01u, 0x3eu, 0x03u, 0x00u, 0x35u, 0x10u, 0x00u, 0x31u,
            0x01u, 0x40u, 0x09u, 0x00u, 0x13u, 0x10u, 0x00u, 0x00u,
            0x08u, 0x72u, 0x00u, 0x00u, 0x09u, 0xfau, 0x09u, 0x10u,
            0x00u, 0x00u, 0x01u, 0x40u, 0x03u, 0x00u, 0x03u, 0xfcu,
            0x13u, 0x00u, 0x01u, 0x09u, 0x10u, 0x00u, 0xf0u, 0x08u,
            0xfeu, 0x01u, 0x70u, 0x08u, 0x09u, 0xfeu, 0x00u, 0x13u,
            0x00u, 0x00u, 0x08u, 0xfau, 0x08u, 0xfeu, 0x01u, 0x76u,
            0x09u, 0x07u, 0xfeu, 0x00u, 0x2eu, 0x07u, 0x00u, 0x80u,
            0x11u, 0x01u, 0x06u, 0x1fu, 0x06u, 0x07u, 0x11u, 0x01u,
            0x07u, 0x10u, 0x00u, 0x00u, 0x01u, 0x3eu, 0x07u, 0x00u,
            0x99u, 0x35u, 0x09u, 0xfeu, 0x01u, 0x76u, 0x09u, 0x05u,
            0x77u, 0x05u, 0x02u, 0xfeu, 0x00u, 0x35u, 0x02u, 0x35u,
            0x09u, 0x36u, 0x07u, 0x36u, 0x03u, 0x10u, 0x00u, 0x00u,
            0x01u, 0x3eu, 0x03u, 0x00u, 0x99u, 0x40u, 0x07u, 0x00u,
            0x7bu, 0x10u, 0x00u, 0x00u, 0x01u, 0x3eu, 0x06u, 0x00u,
            0xc3u, 0x13u, 0x00u, 0x01u, 0x09u, 0x10u, 0x00u, 0xf0u,
            0x07u, 0xfeu, 0x01u, 0x70u, 0x07u, 0x09u, 0xfau, 0x08u,
            0x76u, 0x09u, 0x07u, 0x2eu, 0x07u, 0x00u, 0x80u, 0xfeu,
            0x00u, 0x10u, 0x00u, 0x99u, 0x09u, 0x01u, 0x09u, 0x09u,
            0x11u, 0x09u, 0x00u, 0xfcu,
        )
    }
}